# -*- coding: utf-8 -*-
"""PortfolioOptimization.ipynb

Automatically generated by Colaboratory.

pypfopt is a python package for portfolio optimization using mean-variance optimization and asset risk modeling. I will be utilizing this package for portfolio analysis and optimization.
"""

import pandas as pd
import numpy as np

# Load data
from google.colab import files
uploaded = files.upload()

# Read in price data
df = pd.read_csv("my_portfolio.csv", parse_dates=True, index_col="Date")

from pypfopt.expected_returns import mean_historical_return
from pypfopt.risk_models import CovarianceShrinkage

# Calculate expected returns and sample covariance
mu = mean_historical_return(df) #estimated expected returns for each asset
S = CovarianceShrinkage(df).ledoit_wolf() # estimated co-Var matrix (risk)

print(S)

"""Efficient Frontier Optimization: mathmatically combining assets with different expected returns and volatilities (ie. Harry Markowitz 1952)

*  w - weight vector of stocks
*  μ - expected returns
*  portfolio return = w_1*μ_1 + ... + w_i*μ_i
*  w_i >= 0
"""

from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt.objective_functions import L2_reg

ef = EfficientFrontier(mu, S)
ef.add_objective(L2_reg, gamma=0.1)
w = ef.max_sharpe()
cleaned_weights = ef.clean_weights()
ef.save_weights_to_file("weights.txt")  # saves to file
print(cleaned_weights)

ef.portfolio_performance(verbose=True)

from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices

latest_prices = get_latest_prices(df)
da = DiscreteAllocation(w, latest_prices, total_portfolio_value=500)
allocation, leftover = da.lp_portfolio()
print(allocation)

